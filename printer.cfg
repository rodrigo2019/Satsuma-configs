[gcode_macro _CLIENT_VARIABLE]
variable_park_at_cancel   : True ; allow to move the toolhead to park while execute CANCEL_PRINT [True/False]
gcode:

[include fluidd.cfg]

[virtual_sdcard]
path: /home/satsuma/printer_data/gcodes
on_error_gcode: CANCEL_PRINT

[mcu]
serial: /dev/serial/by-id/usb-Klipper_stm32h723xx_270010000851313332323730-if00

[mcu rpi]
serial: /tmp/klipper_host_mcu

[printer]
kinematics: corexy
max_velocity: 600  
max_accel: 3500             
max_z_velocity: 15          
max_z_accel: 350
square_corner_velocity: 5.0

[input_shaper]
shaper_type_x = mzv
shaper_freq_x = 55.7
shaper_type_y = mzv
shaper_freq_y = 45.8

[force_move]
enable_force_move: True

[exclude_object]

[pause_resume]

[stepper_x]
step_pin: PD4
dir_pin: PD3
enable_pin: !PD6
microsteps: 32
rotation_distance: 40
endstop_pin: tmc2209_stepper_x:virtual_endstop
position_endstop: 229
position_max: 229
homing_speed: 20
homing_retract_dist: 0

[tmc2209 stepper_x]
uart_pin: PD5
run_current: 0.800
diag_pin: ^PC1
driver_SGTHRS: 70 # 255 is most sensitive value, 0 is least sensitive

[stepper_y]
step_pin: PA15
dir_pin: PA8
enable_pin: !PD1
microsteps: 32
rotation_distance: 40
endstop_pin: tmc2209_stepper_y:virtual_endstop
position_endstop: 241
position_max: 241
homing_speed: 20
homing_retract_dist: 0

[tmc2209 stepper_y]
uart_pin: PD0
run_current: 0.800
diag_pin: ^PC3
driver_SGTHRS: 75 # 255 is most sensitive value, 0 is least sensitive

[stepper_z]
step_pin: PD15
dir_pin: !PD14
enable_pin: !PC7
microsteps: 32
rotation_distance: 8
# endstop_pin: tmc2209_stepper_z1:virtual_endstop
# position_endstop: 0
# homing_retract_dist: 0
endstop_pin: probe:z_virtual_endstop
position_max: 230
position_min: -10
homing_speed: 10

[tmc2209 stepper_z]
uart_pin: PC6
run_current: 0.600
diag_pin:

[stepper_z1]
step_pin: PD11
dir_pin: !PD10
enable_pin: !PD13
microsteps: 32
rotation_distance: 8

[tmc2209 stepper_z1]
uart_pin: PD12
run_current: 0.600
diag_pin: ^PA0
driver_SGTHRS: 140

[heater_bed]
heater_pin: PD7
sensor_type: Generic 3950
sensor_pin: PA1
control: pid
pid_Kp: 67.370
pid_Ki: 2.898
pid_Kd: 391.587
min_temp: 0
max_temp: 130

#####################################################################
#   Extruder
#####################################################################

[extruder]

step_pin: PE2
dir_pin: !PE3
enable_pin: !PE0

rotation_distance: 22   #Bondtech 5mm Drive Gears
##  Use 50:17 for Afterburner/Clockwork (BMG Gear Ratio)
##  Use 80:20 for M4, M3.1
gear_ratio: 50:17               # BMG Gear Ratio
microsteps: 32
full_steps_per_rotation: 200    #200 for 1.8 degree, 400 for 0.9 degree
nozzle_diameter: 0.400
filament_diameter: 1.75
heater_pin: PB3
##  Validate the following thermistor type to make sure it is correct
##  See https://www.klipper3d.org/Config_Reference.html#common-thermistors for additional options
sensor_type: ATC Semitec 104GT-2
sensor_pin: PA2
min_temp: 0
max_temp: 300
max_power: 1.0
min_extrude_temp: 170
control: pid
pid_Kp: 30.178
pid_Ki: 2.454
pid_Kd: 92.799
##  Try to keep pressure_advance below 1.0
pressure_advance: 0.035 

max_extrude_cross_section: 5

##  E0 on MOTOR6
##  Make sure to update below for your relevant driver (2208 or 2209)
[tmc2209 extruder]
uart_pin: PE1
interpolate: false
run_current: 0.5
sense_resistor: 0.110
stealthchop_threshold: 0

[heater_fan hotend_fan]
pin: PB7
max_power: 1.0
kick_start_time: 0.5
heater: extruder
heater_temp: 50.0
##  If you are experiencing back flow, you can reduce fan_speed
#fan_speed: 1.0

[fan]
##  Print Cooling Fan - FAN0
pin: PB6
kick_start_time: 0.5
##  Depending on your fan, you may need to increase this value
##  if your fan will not start. Can change cycle_time (increase)
##  if your fan is not able to slow down effectively
off_below: 0.10

#####################################################################
#   Probe
#####################################################################

##  Inductive Probe
##  This probe is not used for Z height, only Quad Gantry Leveling
[probe]

pin: ^PC13

x_offset: 0
y_offset: 25.0
z_offset: 3.20
speed: 10.0
samples: 3
samples_result: median
sample_retract_dist: 3.0
samples_tolerance: 0.01
samples_tolerance_retries: 10

# [safe_z_home]
# home_xy_position: 115,95
# speed: 50
# z_hop: 10
# z_hop_speed: 5
# move_to_previous: False

[z_tilt]
z_positions:
    198, 115
    32, 115
points:
    195, 115
    35, 115
retries: 10
retry_tolerance: 0.01
horizontal_move_z: 20

[screws_tilt_adjust]
screw1:
    32,0
screw1_name:
    Sua esquerda, frontal
screw2:
    198,0
screw2_name:
    Sua direita, frontal

screw3:
    32,175
screw3_name:
    Sua esquerda, posterior
screw4:
    198,175
screw4_name:
    Sua direita, posterior


#screw_thread: CW-M3
#   The type of screw used for bed leveling, M3, M4, or M5, and the
#   rotation direction of the knob that is used to level the bed.
#   Accepted values: CW-M3, CCW-M3, CW-M4, CCW-M4, CW-M5, CCW-M5.
#   Default value is CW-M3 which most printers use. A clockwise
#   rotation of the knob decreases the gap between the nozzle and the
#   bed. Conversely, a counter-clockwise rotation increases the gap.

[bed_mesh]
mesh_min: 30,25
mesh_max: 200,200
probe_count: 4,4
horizontal_move_z: 10

[temperature_sensor pi]
sensor_type: temperature_host
min_temp: 0
max_temp: 250

[thermistor chamber_temp]
temperature1: 25
resistance1: 10000
beta: 3950

[temperature_sensor toolhead] 
sensor_type: chamber_temp
sensor_pin = PA3      
min_temp: -50                    
max_temp: 300  

[filament_switch_sensor switch_sensor] 
switch_pin: ^PC0 
pause_on_runout: False 
runout_gcode: 
    PAUSE # [pause_resume] is required in printer.cfg 
    M117 Filament switch runout
insert_gcode: 
    M117 Filament switch inserted

[filament_motion_sensor encoder_sensor] 
switch_pin: ^PC2 
detection_length: 5.76 # accuracy of motion sensor 2.88mm 
extruder: extruder 
pause_on_runout: False 
runout_gcode: 
    PAUSE # [pause_resume] is required in printer.cfg 
    M117 Filament encoder runout 
insert_gcode: 
    M117 Filament encoder inserted

[gcode_macro POWER_OFF_PRINTER]
gcode:
  {action_call_remote_method("set_device_power",
                             device="printer",
                             state="off")}

[gcode_macro POWER_OFF_LIGHTS]
gcode:
  {action_call_remote_method("set_device_power",
                             device="lights",
                             state="off")}

[delayed_gcode delayed_printer_off]
initial_duration: 0.
gcode:
  # {% if printer.idle_timeout.state == "Idle" %}
  POWER_OFF_PRINTER
  # {% endif %}                             

[gcode_macro PRINT_START]
#   Use PRINT_START for the slicer starting script - please customise for your slicer of choice
gcode:
    M140 S{ params.BED_TEMP }
    G28

    M104 S150

    M190 S{ params.BED_TEMP }

    Z_TILT_ADJUST
    BED_MESH_CALIBRATE
    BED_MESH_PROFILE LOAD=default
    M104 S{ params.TOOL_TEMP }
    G28 X Y
    M109 S{ params.TOOL_TEMP }
    G28 Z

    G90 ; absolute positioning
    G0 Z30 F3600

    M220 S100 ;Reset Feedrate
    M221 S100 ;Reset Flowrate
    
    ; Draw a line to prime some filament
    G92 E0 ;Reset Extruder
    G1 X5.1 Y20 Z20.0 F3000 ;Move Z Axis up
    G1 X5.1 Y20 Z0.28 F5000.0 ;Move to start position
    G1 X5.1 Y40.0 Z0.28 F300. E10 ;Draw the first line
    G1 X5.4 Y40.0 Z0.28 F5000.0 ;Move to side a little
    G1 X5.4 Y20 Z0.28 F300. E20 ;Draw the second line
    G92 E0 ;Reset Extruder
    G1 Z5.0 F3000 ;Move Z Axis up

[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
    # safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}
    {% set z_park = [z_safe, th.axis_maximum.y / 2]|max %}
    
    SAVE_GCODE_STATE NAME=STATE_PRINT_END
    
    G91 ;Relative positionning
    G1 E-2 F2700 ;Retract a bit
    G1 E-2 Z0.2 F2400 ;Retract and raise Z
    
    TURN_OFF_HEATERS
    
    G90                                      ; absolute positioning
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  ; move nozzle to remove stringing
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600  ; park nozzle at rear
    G0 Z{z_park} F3600
    M107                                     ; turn off fan
    
    BED_MESH_CLEAR
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END
    UPDATE_DELAYED_GCODE ID=delayed_printer_off DURATION=900

[gcode_macro _HOME_X]
gcode:
    # Always use consistent run_current on A/B steppers during sensorless homing
    {% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}
    {% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}
    {% set HOME_CURRENT = 0.8 %}
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}

    # Home
    G28 X
    # Move away
    G91
    G1 X-10 F1200
    
    # Wait just a second… (give StallGuard registers time to clear)
    # G4 P1000
    # Set current during print
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}

[gcode_macro _HOME_Y]
gcode:
    # Set current for sensorless homing
    {% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}
    {% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}
    {% set HOME_CURRENT = 0.8 %}
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}

    # Home
    G28 Y
    # Move away
    G91
    G1 Y-10 F1200

    # Wait just a second… (give StallGuard registers time to clear)
    # G4 P1000
    # Set current during print
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}

[homing_override]
axes: xyz
gcode:
    {% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}
    G90
    {% if 'z' not in printer.toolhead.homed_axes and 'Z' not in params %}
        SET_KINEMATIC_POSITION Z=0
        G1 Z10 F600
        M84 Z
    {% elif "z" in printer.toolhead.homed_axes and printer.toolhead.position.z < 10 %}
        G1 Z10 F600
    {% endif %}

    {% if home_all or 'X' in params %}
        _HOME_X
    {% endif %}

    {% if home_all or 'Y' in params %}
        _HOME_Y
    {% endif %}

    {% if home_all or 'Z' in params %}
        {% if ('x' in printer.toolhead.homed_axes and 'y' in printer.toolhead.homed_axes) or home_all %}
            G90
            G1 X115 Y115 F3000
            G28 Z
            G1 Z10 F600
        {% else %}
            # RESPOND TYPE=error MSG="X and Y must be homed"
            { action_raise_error("X and Y must be homed") }
        {% endif %}
    {% endif %}

[gcode_macro LOAD_FILAMENT]
gcode:
    {% set speed = params.SPEED|default(500) %}
    G91
    G1 E50 F{speed}
    G1 E50 F{speed}
    G92

[gcode_macro UNLOAD_FILAMENT]
gcode:
    {% set speed = params.SPEED|default(500) %}
    G91
    G1 E-50 F{speed}
    G1 E-50 F{speed}
    G92

[motion_minder]
# Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
# Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10

[gcode_macro TEST_SPEED]
gcode:
    # Speed
    {% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
    # Iterations
    {% set iterations = params.ITERATIONS|default(5)|int %}
    # Acceleration
    {% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
    # Bounding inset for large pattern (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions)
    {% set bound = params.BOUND|default(20)|int %}
    # Size for small pattern box
    {% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
    
    # Large pattern
        # Max positions, inset by BOUND
        {% set x_min = printer.toolhead.axis_minimum.x + bound %}
        {% set x_max = printer.toolhead.axis_maximum.x - bound %}
        {% set y_min = printer.toolhead.axis_minimum.y + bound %}
        {% set y_max = printer.toolhead.axis_maximum.y - bound %}
    
    # Small pattern at center
        # Find X/Y center point
        {% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
        {% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
        
        # Set small pattern box around center point
        {% set x_center_min = x_center - (smallpatternsize/2) %}
        {% set x_center_max = x_center + (smallpatternsize/2) %}
        {% set y_center_min = y_center - (smallpatternsize/2) %}
        {% set y_center_max = y_center + (smallpatternsize/2) %}

    # Save current gcode state (absolute/relative, etc)
    SAVE_GCODE_STATE NAME=TEST_SPEED
    
    # Output parameters to g-code terminal
    { action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
    
    # Home and get position for comparison later:
        # M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        # G28
        # # QGL if not already QGLd (only if QGL section exists in config)
        # {% if printer.configfile.settings.quad_gantry_level %}
        #     {% if printer.quad_gantry_level.applied == False %}
        #         QUAD_GANTRY_LEVEL
        #         G28 Z
        #     {% endif %}
        # {% endif %} 
        # Move 50mm away from max position and home again (to help with hall effect endstop accuracy - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/24)
        G90
        G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 X Y
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Go to starting position
    G0 X{x_min} Y{y_min} F{speed*60}

    # Set new limits
    SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}

    {% for i in range(iterations) %}
        # Large pattern diagonals
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        
        # Large pattern box
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
    
        # Small pattern diagonals
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        
        # Small patternbox
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
    {% endfor %}

    # Restore max speed/accel/accel_to_decel to their configured values
    SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 

    # Re-home and get position again for comparison:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        # G28 # This is a full G28 to fix an issue with CoreXZ - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/12
        # Go to XY home positions (in case your homing override leaves it elsewhere)
        G90
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Restore previous gcode state (absolute/relative, etc)
    RESTORE_GCODE_STATE NAME=TEST_SPEED


[gcode_macro CYCLE_Z]
gcode:
    # Iterations
    {% set iterations = params.ITERATIONS|default(5)|int %}
    G90
    {% for i in range(iterations) %}
        # Large pattern diagonals
        G0 Z230
        G0 Z0
    {% endfor %}
